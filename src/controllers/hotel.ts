import { Context } from 'koa'
import { getDb } from '../services/db'
import { Hotel } from '../models/hotel'
import { ObjectId } from 'mongodb'

export const listHotels = async (ctx: Context) => {
  console.log('DEBUG: GET /hotels called')
  const { city, star, limit, page } = ctx.query
  const filter: { city?: string; star?: number } = {}
  if (city) filter.city = String(city)
  if (star) filter.star = Number(star)

  // Pagination
  let limitNum = Number(limit) || 20
  let pageNum = Number(page) || 1
  if (limitNum < 1 || limitNum > 100) limitNum = 20
  if (pageNum < 1) pageNum = 1
  const skip = (pageNum - 1) * limitNum

  const db = await getDb()
  const collection = db.collection('hotels')
  const total = await collection.countDocuments(filter)
  const hotels = await collection.find(filter).skip(skip).limit(limitNum).toArray()
  ctx.body = {
    hotels,
    total,
    page: pageNum,
    limit: limitNum,
  }
}

// GET /hotels/:id
export const getHotel = async (ctx: Context) => {
  const { id } = ctx.params
  const db = await getDb()
  let hotel = null
  try {
    hotel = await db.collection('hotels').findOne({ _id: new ObjectId(id) })
  } catch {
    ctx.throw(400, 'Invalid hotel id')
  }
  if (!hotel) ctx.throw(404, 'Hotel not found')
  // Convert _id to string for response, but do not mutate the DB object
  if (hotel && hotel._id && typeof hotel._id !== 'string') {
    ctx.body = { ...hotel, _id: hotel._id.toString() }
  } else {
    ctx.body = hotel
  }
}

// POST /hotels   (operator only)
export const createHotel = async (ctx: Context) => {
  const data = ctx.request.body as Omit<Hotel, '_id'>
  const db = await getDb()
  // _id will be auto-generated by MongoDB
  const result = await db.collection('hotels').insertOne(data)
  ctx.status = 201
  ctx.body = { id: result.insertedId }
}

// PUT /hotels/:id
export const updateHotel = async (ctx: Context) => {
  const { id } = ctx.params
  const db = await getDb()
  await db
    .collection('hotels')
    .updateOne({ _id: new ObjectId(id) }, { $set: ctx.request.body as Partial<Hotel> })
  ctx.body = { msg: 'update' }
}

// DELETE /hotels/:id
export const deleteHotel = async (ctx: Context) => {
  const { id } = ctx.params
  const db = await getDb()
  await db.collection('hotels').deleteOne({ _id: new ObjectId(id) })
  ctx.status = 204
}
